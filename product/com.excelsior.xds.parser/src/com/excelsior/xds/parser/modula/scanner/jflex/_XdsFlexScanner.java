/* The following code was generated by JFlex 1.4.3 on 14.02.14 1:15 */

package com.excelsior.xds.parser.modula.scanner.jflex;

import com.excelsior.xds.core.text.TextPosition;
import com.excelsior.xds.parser.commons.ast.TokenType;
import com.excelsior.xds.parser.modula.ast.tokens.ModulaTokenTypes;
import com.excelsior.xds.parser.modula.ast.tokens.PragmaTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14.02.14 1:15 from the specification file
 * <tt>xds.flex</tt>
 */
@SuppressWarnings("unused")
public class _XdsFlexScanner implements ModulaTokenTypes, PragmaTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_BLOCK_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int IN_CPP_BLOCK_COMMENT = 4;
  public static final int IN_PRAGMA_BLOCK = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\66\1\25"+
    "\1\76\1\36\1\0\1\71\1\26\1\31\1\33\1\32\1\15\1\73"+
    "\1\27\1\16\1\30\10\5\2\6\1\67\1\72\1\34\1\75\1\35"+
    "\1\0\1\70\1\44\1\10\1\21\1\17\1\14\1\54\1\51\1\12"+
    "\1\52\1\3\1\60\1\56\1\46\1\45\1\41\1\40\1\61\1\47"+
    "\1\43\1\53\1\42\1\55\1\57\1\23\1\50\1\3\1\62\1\0"+
    "\1\63\1\70\1\3\1\0\1\7\1\11\1\22\3\7\1\3\1\13"+
    "\1\20\16\3\1\24\2\3\1\64\1\37\1\65\1\74\53\0\1\3"+
    "\12\0\1\3\4\0\1\3\5\0\27\3\1\0\37\3\1\0\u013f\3"+
    "\31\0\162\3\4\0\14\3\16\0\5\3\11\0\1\3\213\0\1\3"+
    "\13\0\1\3\1\0\3\3\1\0\1\3\1\0\24\3\1\0\54\3"+
    "\1\0\46\3\1\0\5\3\4\0\202\3\10\0\105\3\1\0\46\3"+
    "\2\0\2\3\6\0\20\3\41\0\46\3\2\0\1\3\7\0\47\3"+
    "\110\0\33\3\5\0\3\3\56\0\32\3\5\0\13\3\25\0\12\4"+
    "\4\0\2\3\1\0\143\3\1\0\1\3\17\0\2\3\7\0\2\3"+
    "\12\4\3\3\2\0\1\3\20\0\1\3\1\0\36\3\35\0\3\3"+
    "\60\0\46\3\13\0\1\3\u0152\0\66\3\3\0\1\3\22\0\1\3"+
    "\7\0\12\3\4\0\12\4\25\0\10\3\2\0\2\3\2\0\26\3"+
    "\1\0\7\3\1\0\1\3\3\0\4\3\3\0\1\3\36\0\2\3"+
    "\1\0\3\3\4\0\12\4\2\3\23\0\6\3\4\0\2\3\2\0"+
    "\26\3\1\0\7\3\1\0\2\3\1\0\2\3\1\0\2\3\37\0"+
    "\4\3\1\0\1\3\7\0\12\4\2\0\3\3\20\0\11\3\1\0"+
    "\3\3\1\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3\3\0"+
    "\1\3\22\0\1\3\17\0\2\3\4\0\12\4\25\0\10\3\2\0"+
    "\2\3\2\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3\3\0"+
    "\1\3\36\0\2\3\1\0\3\3\4\0\12\4\1\0\1\3\21\0"+
    "\1\3\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0"+
    "\1\3\1\0\2\3\3\0\2\3\3\0\3\3\3\0\10\3\1\0"+
    "\3\3\55\0\11\4\25\0\10\3\1\0\3\3\1\0\27\3\1\0"+
    "\12\3\1\0\5\3\46\0\2\3\4\0\12\4\25\0\10\3\1\0"+
    "\3\3\1\0\27\3\1\0\12\3\1\0\5\3\3\0\1\3\40\0"+
    "\1\3\1\0\2\3\4\0\12\4\25\0\10\3\1\0\3\3\1\0"+
    "\27\3\1\0\20\3\46\0\2\3\4\0\12\4\25\0\22\3\3\0"+
    "\30\3\1\0\11\3\1\0\1\3\2\0\7\3\72\0\60\3\1\0"+
    "\2\3\14\0\7\3\11\0\12\4\47\0\2\3\1\0\1\3\2\0"+
    "\2\3\1\0\1\3\2\0\1\3\6\0\4\3\1\0\7\3\1\0"+
    "\3\3\1\0\1\3\1\0\1\3\2\0\2\3\1\0\4\3\1\0"+
    "\2\3\11\0\1\3\2\0\5\3\1\0\1\3\11\0\12\4\2\0"+
    "\2\3\42\0\1\3\37\0\12\4\26\0\10\3\1\0\42\3\35\0"+
    "\4\3\164\0\42\3\1\0\5\3\1\0\2\3\25\0\12\4\6\0"+
    "\6\3\112\0\46\3\12\0\51\3\7\0\132\3\5\0\104\3\5\0"+
    "\122\3\6\0\7\3\1\0\77\3\1\0\1\3\1\0\4\3\2\0"+
    "\7\3\1\0\1\3\1\0\4\3\2\0\47\3\1\0\1\3\1\0"+
    "\4\3\2\0\37\3\1\0\1\3\1\0\4\3\2\0\7\3\1\0"+
    "\1\3\1\0\4\3\2\0\7\3\1\0\7\3\1\0\27\3\1\0"+
    "\37\3\1\0\1\3\1\0\4\3\2\0\7\3\1\0\47\3\1\0"+
    "\23\3\16\0\11\4\56\0\125\3\14\0\u026c\3\2\0\10\3\12\0"+
    "\32\3\5\0\113\3\25\0\15\3\1\0\4\3\16\0\22\3\16\0"+
    "\22\3\16\0\15\3\1\0\3\3\17\0\64\3\43\0\1\3\4\0"+
    "\1\3\3\0\12\4\46\0\12\4\6\0\130\3\10\0\51\3\127\0"+
    "\35\3\51\0\12\4\36\3\2\0\5\3\u038b\0\154\3\224\0\234\3"+
    "\4\0\132\3\6\0\26\3\2\0\6\3\2\0\46\3\2\0\6\3"+
    "\2\0\10\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\37\3"+
    "\2\0\65\3\1\0\7\3\1\0\1\3\3\0\3\3\1\0\7\3"+
    "\3\0\4\3\2\0\6\3\4\0\15\3\5\0\3\3\1\0\7\3"+
    "\164\0\1\3\15\0\1\3\202\0\1\3\4\0\1\3\2\0\12\3"+
    "\1\0\1\3\3\0\5\3\6\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\4\3\1\0\3\3\1\0\7\3\3\0\3\3\5\0\5\3"+
    "\u0ebb\0\2\3\52\0\5\3\5\0\2\3\4\0\126\3\6\0\3\3"+
    "\1\0\132\3\1\0\4\3\5\0\50\3\4\0\136\3\21\0\30\3"+
    "\70\0\20\3\u0200\0\u19b6\3\112\0\u51a6\3\132\0\u048d\3\u0773\0\u2ba4\3"+
    "\u215c\0\u012e\3\2\0\73\3\225\0\7\3\14\0\5\3\5\0\1\3"+
    "\1\0\12\3\1\0\15\3\1\0\5\3\1\0\1\3\1\0\2\3"+
    "\1\0\2\3\1\0\154\3\41\0\u016b\3\22\0\100\3\2\0\66\3"+
    "\50\0\14\3\164\0\5\3\1\0\207\3\23\0\12\4\7\0\32\3"+
    "\6\0\32\3\13\0\131\3\3\0\6\3\2\0\6\3\2\0\6\3"+
    "\2\0\3\3\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\2\4\2\3\1\5\1\6"+
    "\2\3\2\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\20\3\1\17\1\20\1\21\1\22\1\16"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\4\33\1\3\1\12\1\14\2\3\1\4\1\0\1\34"+
    "\1\35\1\36\1\37\1\40\1\3\1\41\3\3\1\42"+
    "\1\3\1\43\3\3\1\0\1\44\1\0\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\3\3\1\57\1\60\11\3\1\61\1\62\1\3\1\63"+
    "\1\3\1\64\12\3\1\0\1\65\1\66\1\67\1\70"+
    "\1\3\1\71\3\3\1\36\1\0\1\72\1\0\1\73"+
    "\4\3\1\74\2\3\1\75\2\3\7\0\1\76\1\0"+
    "\4\3\1\77\1\100\1\101\1\102\1\3\1\103\1\104"+
    "\2\3\1\105\5\3\1\106\2\3\1\107\5\3\1\110"+
    "\1\3\1\111\1\3\1\112\1\36\1\0\1\113\1\0"+
    "\3\3\1\114\1\115\3\3\1\116\1\117\2\0\1\120"+
    "\1\0\1\121\1\122\1\123\2\0\12\3\1\124\2\3"+
    "\1\125\1\126\1\3\1\127\1\3\1\130\2\3\1\131"+
    "\2\3\1\132\1\133\1\134\2\3\1\135\1\3\1\136"+
    "\5\0\3\3\1\137\1\140\4\3\1\141\4\3\1\142"+
    "\1\143\2\3\1\144\1\145\1\3\1\146\1\147\3\3"+
    "\1\150\1\151\1\152\1\153\1\154\6\3\1\155\3\3"+
    "\1\156\1\157\1\3\1\160\6\3\1\161\1\162\1\3"+
    "\1\163\1\164\4\3\1\165";

  private static int [] zzUnpackAction() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\374\0\u02b5\0\u02f4\0\u0333\0\u0372"+
    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\374\0\u04ec\0\u052b"+
    "\0\374\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4"+
    "\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc"+
    "\0\u091b\0\374\0\374\0\374\0\374\0\u095a\0\u0999\0\374"+
    "\0\374\0\374\0\374\0\374\0\374\0\374\0\374\0\u09d8"+
    "\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0"+
    "\0\u0c0f\0\u0c0f\0\374\0\u0c4e\0\u0c0f\0\374\0\u0c8d\0\u017a"+
    "\0\u0ccc\0\u0d0b\0\u0d4a\0\374\0\u0d89\0\u017a\0\u0dc8\0\u0e07"+
    "\0\u0e46\0\u0372\0\374\0\u03b1\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\374\0\u0f81\0\374\0\374\0\374\0\374\0\u0fc0\0\u0fff"+
    "\0\u103e\0\u017a\0\u017a\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179"+
    "\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u017a\0\u017a\0\u12b4\0\u017a"+
    "\0\u12f3\0\u017a\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d"+
    "\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\374\0\374\0\374"+
    "\0\374\0\u15e7\0\374\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722"+
    "\0\374\0\u1761\0\374\0\u17a0\0\u17df\0\u181e\0\u185d\0\u017a"+
    "\0\u189c\0\u18db\0\u017a\0\u191a\0\u1959\0\u0f03\0\u1998\0\u19d7"+
    "\0\u0f42\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90"+
    "\0\u1bcf\0\u1c0e\0\u017a\0\u017a\0\u017a\0\u017a\0\u1c4d\0\u017a"+
    "\0\u1c8c\0\u1ccb\0\u1d0a\0\u017a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06"+
    "\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u017a\0\u1f41\0\u1f80\0\u1fbf"+
    "\0\u1ffe\0\u203d\0\374\0\u207c\0\u017a\0\u20bb\0\u017a\0\u20fa"+
    "\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u017a\0\u017a"+
    "\0\u22b3\0\u22f2\0\u2331\0\u017a\0\u0f03\0\u2370\0\u23af\0\374"+
    "\0\u1ad3\0\u23ee\0\u242d\0\374\0\u246c\0\u24ab\0\u24ea\0\u2529"+
    "\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721"+
    "\0\u017a\0\u2760\0\u279f\0\u017a\0\u017a\0\u27de\0\u017a\0\u281d"+
    "\0\u017a\0\u285c\0\u289b\0\u017a\0\u28da\0\u2919\0\u017a\0\374"+
    "\0\u017a\0\u2958\0\u2997\0\u017a\0\u29d6\0\u017a\0\u23ee\0\u2a15"+
    "\0\u242d\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u017a\0\u017a"+
    "\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u017a\0\u2c8b\0\u2cca\0\u2d09"+
    "\0\u2d48\0\u017a\0\u017a\0\u2d87\0\u2dc6\0\u017a\0\u017a\0\u2e05"+
    "\0\374\0\374\0\u2e44\0\u2e83\0\u2ec2\0\u017a\0\u017a\0\u017a"+
    "\0\u017a\0\u017a\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c"+
    "\0\u017a\0\u307b\0\u30ba\0\u30f9\0\u017a\0\u017a\0\u3138\0\u017a"+
    "\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u017a\0\u017a"+
    "\0\u32f1\0\u017a\0\u017a\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u017a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\5\1\10\1\11\1\7\1\12"+
    "\3\7\1\13\1\14\1\15\1\16\1\7\1\17\3\7"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\5\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\7\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\7\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\31\67\1\70\1\71\74\67\1\70\1\67"+
    "\1\72\44\67\1\5\2\6\1\7\1\5\1\10\1\11"+
    "\1\7\1\12\3\7\1\13\1\14\1\15\1\73\1\7"+
    "\1\17\3\7\1\20\1\21\1\22\1\23\1\24\1\74"+
    "\1\26\1\75\1\30\1\5\1\31\1\76\1\33\1\34"+
    "\1\35\1\36\1\77\1\40\1\41\1\7\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\7\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\100\0\2\6\77\0\12\7"+
    "\2\0\6\7\13\0\22\7\22\0\1\10\1\100\1\101"+
    "\2\102\2\103\1\101\1\0\1\104\1\101\1\0\2\105"+
    "\2\106\17\0\1\101\7\0\1\101\27\0\1\11\1\100"+
    "\3\101\2\103\1\101\1\0\1\104\1\101\1\0\2\105"+
    "\2\106\17\0\1\101\7\0\1\101\25\0\11\7\1\107"+
    "\2\0\6\7\13\0\10\7\1\110\11\7\20\0\12\7"+
    "\2\0\4\7\1\111\1\7\13\0\5\7\1\112\10\7"+
    "\1\113\3\7\33\0\1\114\63\0\11\7\1\115\2\0"+
    "\6\7\13\0\1\7\1\116\10\7\1\117\7\7\20\0"+
    "\12\7\2\0\6\7\13\0\1\7\1\120\2\7\1\121"+
    "\15\7\15\0\1\122\1\123\23\122\1\123\51\122\1\124"+
    "\1\123\24\124\1\123\50\124\27\0\1\125\77\0\1\126"+
    "\1\0\1\127\76\0\1\130\33\0\1\52\1\54\41\0"+
    "\1\131\76\0\1\132\1\0\1\133\1\66\37\0\1\134"+
    "\36\0\1\135\37\0\1\136\4\0\12\7\2\0\6\7"+
    "\13\0\1\7\1\137\2\7\1\140\2\7\1\141\12\7"+
    "\20\0\12\7\2\0\6\7\13\0\7\7\1\142\4\7"+
    "\1\143\5\7\20\0\12\7\2\0\6\7\13\0\5\7"+
    "\1\144\14\7\20\0\11\7\1\145\2\0\6\7\13\0"+
    "\22\7\20\0\12\7\2\0\6\7\13\0\3\7\1\146"+
    "\1\7\1\147\1\7\1\150\12\7\20\0\12\7\2\0"+
    "\6\7\13\0\1\7\1\151\20\7\20\0\12\7\2\0"+
    "\6\7\13\0\1\7\1\152\20\7\20\0\11\7\1\153"+
    "\2\0\6\7\13\0\22\7\20\0\12\7\2\0\6\7"+
    "\13\0\1\7\1\154\20\7\20\0\12\7\2\0\6\7"+
    "\13\0\3\7\1\155\1\7\1\156\1\157\5\7\1\160"+
    "\5\7\20\0\7\7\1\161\2\7\2\0\6\7\13\0"+
    "\1\7\1\162\6\7\1\163\11\7\20\0\12\7\2\0"+
    "\6\7\13\0\1\7\1\164\5\7\1\165\2\7\1\166"+
    "\7\7\20\0\12\7\2\0\6\7\13\0\4\7\1\167"+
    "\15\7\20\0\12\7\2\0\6\7\13\0\1\7\1\170"+
    "\2\7\1\171\15\7\20\0\7\7\1\172\2\7\2\0"+
    "\6\7\13\0\12\7\1\173\7\7\20\0\12\7\2\0"+
    "\6\7\13\0\2\7\1\174\17\7\50\0\1\53\132\0"+
    "\1\175\5\0\1\176\33\0\1\177\77\0\1\200\73\0"+
    "\1\201\51\0\11\7\1\202\2\0\6\7\13\0\1\7"+
    "\1\116\10\7\1\117\7\7\47\0\1\131\2\0\1\203"+
    "\75\0\1\133\1\66\37\0\1\134\4\0\12\7\2\0"+
    "\6\7\13\0\1\7\1\204\1\205\1\7\1\140\2\7"+
    "\1\141\12\7\20\0\11\7\1\206\2\0\6\7\13\0"+
    "\1\7\1\151\20\7\22\0\2\100\3\101\2\103\1\101"+
    "\1\0\1\104\1\101\1\0\2\101\2\106\17\0\1\101"+
    "\7\0\1\101\27\0\5\101\2\103\1\101\2\0\1\101"+
    "\1\0\2\101\2\106\17\0\1\101\7\0\1\101\27\0"+
    "\2\207\5\0\1\210\1\0\1\211\1\212\1\213\61\0"+
    "\12\7\2\0\6\7\13\0\11\7\1\214\10\7\20\0"+
    "\12\7\2\0\2\7\1\215\3\7\13\0\1\216\11\7"+
    "\1\217\7\7\20\0\12\7\2\0\1\220\5\7\13\0"+
    "\22\7\20\0\12\7\2\0\6\7\13\0\3\7\1\221"+
    "\16\7\20\0\12\7\2\0\6\7\13\0\14\7\1\222"+
    "\5\7\20\0\12\7\2\0\6\7\13\0\15\7\1\223"+
    "\4\7\20\0\12\7\2\0\6\7\13\0\5\7\1\224"+
    "\14\7\20\0\12\7\2\0\6\7\13\0\3\7\1\225"+
    "\16\7\15\0\1\125\1\0\75\125\1\126\1\0\75\126"+
    "\30\226\1\227\1\226\1\230\44\226\31\231\1\232\1\233"+
    "\44\231\2\0\1\234\33\0\1\235\1\0\1\236\41\0"+
    "\12\7\2\0\6\7\13\0\12\7\1\237\7\7\20\0"+
    "\12\7\2\0\2\7\1\240\3\7\13\0\22\7\20\0"+
    "\12\7\2\0\6\7\13\0\1\7\1\241\20\7\20\0"+
    "\12\7\2\0\6\7\13\0\13\7\1\242\6\7\20\0"+
    "\12\7\2\0\6\7\13\0\13\7\1\243\5\7\1\244"+
    "\20\0\12\7\2\0\6\7\13\0\6\7\1\245\13\7"+
    "\20\0\12\7\2\0\1\246\5\7\13\0\22\7\20\0"+
    "\12\7\2\0\6\7\13\0\7\7\1\247\12\7\20\0"+
    "\12\7\2\0\6\7\13\0\13\7\1\250\6\7\20\0"+
    "\12\7\2\0\1\251\5\7\13\0\22\7\20\0\12\7"+
    "\2\0\2\7\1\252\3\7\13\0\1\253\5\7\1\254"+
    "\4\7\1\255\6\7\20\0\12\7\2\0\6\7\13\0"+
    "\13\7\1\256\6\7\20\0\12\7\2\0\6\7\13\0"+
    "\1\257\21\7\20\0\11\7\1\260\2\0\6\7\13\0"+
    "\22\7\20\0\12\7\2\0\6\7\13\0\1\261\21\7"+
    "\20\0\12\7\2\0\6\7\13\0\7\7\1\262\12\7"+
    "\20\0\12\7\2\0\6\7\13\0\1\7\1\263\20\7"+
    "\20\0\12\7\2\0\6\7\13\0\5\7\1\264\14\7"+
    "\20\0\12\7\2\0\6\7\13\0\7\7\1\265\12\7"+
    "\20\0\12\7\2\0\6\7\13\0\1\7\1\266\20\7"+
    "\20\0\5\7\1\267\4\7\2\0\6\7\13\0\22\7"+
    "\20\0\12\7\2\0\6\7\13\0\12\7\1\270\7\7"+
    "\20\0\12\7\2\0\6\7\13\0\13\7\1\271\6\7"+
    "\20\0\12\7\2\0\6\7\13\0\4\7\1\272\15\7"+
    "\112\0\1\273\4\0\12\7\2\0\6\7\13\0\14\7"+
    "\1\274\5\7\20\0\12\7\2\0\6\7\13\0\1\275"+
    "\11\7\1\237\7\7\20\0\12\7\2\0\6\7\13\0"+
    "\3\7\1\276\16\7\20\0\12\7\2\0\6\7\13\0"+
    "\17\7\1\277\2\7\22\0\2\207\5\0\1\210\2\0"+
    "\1\212\1\213\63\0\2\300\6\0\1\301\11\0\1\301"+
    "\54\0\2\302\6\0\1\303\11\0\1\303\52\0\12\7"+
    "\2\0\6\7\13\0\12\7\1\304\7\7\20\0\11\7"+
    "\1\305\2\0\6\7\13\0\22\7\20\0\12\7\2\0"+
    "\6\7\13\0\1\7\1\306\20\7\20\0\12\7\2\0"+
    "\6\7\13\0\13\7\1\307\6\7\20\0\11\7\1\310"+
    "\2\0\6\7\13\0\12\7\1\311\7\7\20\0\12\7"+
    "\2\0\6\7\13\0\12\7\1\312\7\7\20\0\12\7"+
    "\2\0\6\7\13\0\3\7\1\313\16\7\20\0\11\7"+
    "\1\314\2\0\6\7\13\0\22\7\15\0\30\226\1\227"+
    "\1\226\1\0\74\226\1\315\1\226\1\316\1\0\43\226"+
    "\31\231\1\232\1\0\76\231\1\317\1\320\43\231\2\0"+
    "\1\234\35\0\1\236\40\0\1\321\31\0\1\322\1\323"+
    "\1\0\1\324\100\0\1\325\1\326\37\0\12\7\2\0"+
    "\6\7\13\0\5\7\1\327\14\7\20\0\12\7\2\0"+
    "\6\7\13\0\20\7\1\330\1\7\20\0\12\7\2\0"+
    "\2\7\1\331\3\7\13\0\22\7\20\0\12\7\2\0"+
    "\6\7\13\0\12\7\1\332\7\7\20\0\12\7\2\0"+
    "\6\7\13\0\4\7\1\333\15\7\20\0\12\7\2\0"+
    "\6\7\13\0\2\7\1\334\17\7\20\0\12\7\2\0"+
    "\6\7\13\0\1\7\1\335\20\7\20\0\11\7\1\336"+
    "\2\0\6\7\13\0\22\7\20\0\12\7\2\0\6\7"+
    "\13\0\2\7\1\337\4\7\1\340\12\7\20\0\12\7"+
    "\2\0\6\7\13\0\1\7\1\341\20\7\20\0\12\7"+
    "\2\0\6\7\13\0\1\7\1\342\14\7\1\343\3\7"+
    "\20\0\12\7\2\0\6\7\13\0\5\7\1\344\14\7"+
    "\20\0\11\7\1\345\2\0\6\7\13\0\22\7\20\0"+
    "\12\7\2\0\6\7\13\0\17\7\1\346\2\7\20\0"+
    "\12\7\2\0\6\7\13\0\6\7\1\347\13\7\20\0"+
    "\12\7\2\0\6\7\13\0\4\7\1\350\15\7\20\0"+
    "\12\7\2\0\6\7\13\0\1\351\21\7\20\0\11\7"+
    "\1\352\2\0\6\7\13\0\22\7\20\0\12\7\2\0"+
    "\6\7\13\0\16\7\1\353\3\7\20\0\7\7\1\354"+
    "\2\7\2\0\6\7\13\0\22\7\20\0\12\7\2\0"+
    "\6\7\13\0\16\7\1\355\3\7\20\0\12\7\2\0"+
    "\6\7\13\0\12\7\1\356\7\7\20\0\7\7\1\357"+
    "\2\7\2\0\6\7\13\0\22\7\22\0\2\300\11\0"+
    "\1\213\63\0\2\300\75\0\2\302\11\0\1\360\63\0"+
    "\2\302\73\0\12\7\2\0\6\7\13\0\5\7\1\361"+
    "\14\7\20\0\12\7\2\0\6\7\13\0\1\362\21\7"+
    "\20\0\12\7\2\0\6\7\13\0\7\7\1\363\12\7"+
    "\20\0\12\7\2\0\6\7\13\0\14\7\1\364\5\7"+
    "\20\0\12\7\2\0\6\7\13\0\5\7\1\365\14\7"+
    "\20\0\12\7\2\0\6\7\13\0\13\7\1\366\6\7"+
    "\15\0\32\226\1\316\1\0\43\226\32\231\1\317\1\0"+
    "\43\231\2\0\1\367\27\0\1\370\46\0\1\371\27\0"+
    "\1\372\104\0\1\371\101\0\1\373\36\0\12\7\2\0"+
    "\6\7\13\0\13\7\1\374\6\7\20\0\11\7\1\375"+
    "\2\0\6\7\13\0\22\7\20\0\11\7\1\376\2\0"+
    "\6\7\13\0\22\7\20\0\12\7\2\0\6\7\13\0"+
    "\16\7\1\377\3\7\20\0\12\7\2\0\6\7\13\0"+
    "\10\7\1\u0100\11\7\20\0\12\7\2\0\6\7\13\0"+
    "\16\7\1\u0101\3\7\20\0\12\7\2\0\6\7\13\0"+
    "\7\7\1\u0102\12\7\20\0\12\7\2\0\6\7\13\0"+
    "\4\7\1\u0103\15\7\20\0\12\7\2\0\6\7\13\0"+
    "\7\7\1\u0104\12\7\20\0\12\7\2\0\6\7\13\0"+
    "\10\7\1\u0105\11\7\20\0\12\7\2\0\6\7\13\0"+
    "\7\7\1\u0106\12\7\20\0\11\7\1\u0107\2\0\6\7"+
    "\13\0\22\7\20\0\12\7\2\0\6\7\13\0\4\7"+
    "\1\u0108\15\7\20\0\12\7\2\0\6\7\13\0\16\7"+
    "\1\u0109\3\7\20\0\12\7\2\0\6\7\13\0\16\7"+
    "\1\u010a\3\7\20\0\11\7\1\u010b\2\0\6\7\13\0"+
    "\22\7\20\0\12\7\2\0\6\7\13\0\12\7\1\u010c"+
    "\7\7\20\0\12\7\2\0\6\7\13\0\5\7\1\u010d"+
    "\14\7\20\0\12\7\2\0\6\7\13\0\13\7\1\u010e"+
    "\6\7\20\0\12\7\2\0\6\7\13\0\13\7\1\u010f"+
    "\6\7\20\0\12\7\2\0\6\7\13\0\12\7\1\u0110"+
    "\7\7\52\0\1\u0111\76\0\1\u0112\53\0\1\367\67\0"+
    "\11\7\1\u0113\2\0\6\7\13\0\22\7\20\0\12\7"+
    "\2\0\1\u0114\5\7\13\0\22\7\20\0\12\7\2\0"+
    "\1\u0115\5\7\13\0\22\7\20\0\11\7\1\u0116\2\0"+
    "\6\7\13\0\22\7\20\0\12\7\2\0\1\u0117\5\7"+
    "\13\0\22\7\20\0\12\7\2\0\6\7\13\0\13\7"+
    "\1\u0118\6\7\20\0\12\7\2\0\6\7\13\0\5\7"+
    "\1\u0119\14\7\20\0\12\7\2\0\6\7\13\0\13\7"+
    "\1\u011a\6\7\20\0\12\7\2\0\6\7\13\0\6\7"+
    "\1\u011b\13\7\20\0\12\7\2\0\6\7\13\0\7\7"+
    "\1\u011c\12\7\20\0\12\7\2\0\6\7\13\0\16\7"+
    "\1\u011d\3\7\20\0\12\7\2\0\6\7\13\0\14\7"+
    "\1\u011e\5\7\20\0\11\7\1\u011f\2\0\6\7\13\0"+
    "\12\7\1\u0110\7\7\20\0\12\7\2\0\6\7\13\0"+
    "\13\7\1\u0120\6\7\20\0\12\7\2\0\6\7\13\0"+
    "\7\7\1\u0121\12\7\20\0\12\7\2\0\6\7\13\0"+
    "\3\7\1\u0122\16\7\20\0\12\7\2\0\6\7\13\0"+
    "\2\7\1\u0123\17\7\20\0\11\7\1\u0124\2\0\6\7"+
    "\13\0\22\7\20\0\12\7\2\0\1\u0125\5\7\13\0"+
    "\22\7\20\0\12\7\2\0\6\7\13\0\10\7\1\u0126"+
    "\11\7\20\0\12\7\2\0\6\7\13\0\12\7\1\u0127"+
    "\7\7\20\0\12\7\2\0\1\u0128\5\7\13\0\22\7"+
    "\20\0\12\7\2\0\6\7\13\0\12\7\1\u0129\7\7"+
    "\20\0\11\7\1\u012a\2\0\6\7\13\0\22\7\20\0"+
    "\12\7\2\0\6\7\13\0\7\7\1\u012b\12\7\20\0"+
    "\12\7\2\0\6\7\13\0\5\7\1\u012c\14\7\20\0"+
    "\11\7\1\u012d\2\0\6\7\13\0\22\7\20\0\12\7"+
    "\2\0\6\7\13\0\1\7\1\u012e\20\7\20\0\12\7"+
    "\2\0\6\7\13\0\13\7\1\u012f\6\7\20\0\11\7"+
    "\1\u0130\2\0\6\7\13\0\22\7\20\0\12\7\2\0"+
    "\6\7\13\0\13\7\1\u0131\6\7\20\0\12\7\2\0"+
    "\1\u0132\5\7\13\0\22\7\20\0\12\7\2\0\6\7"+
    "\13\0\5\7\1\u0133\14\7\20\0\12\7\2\0\6\7"+
    "\13\0\4\7\1\u0134\15\7\20\0\12\7\2\0\6\7"+
    "\13\0\13\7\1\u0135\6\7\20\0\12\7\2\0\6\7"+
    "\13\0\12\7\1\u0136\7\7\20\0\12\7\2\0\6\7"+
    "\13\0\1\7\1\u0137\20\7\20\0\12\7\2\0\6\7"+
    "\13\0\5\7\1\u0138\14\7\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13356];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\6\1\1\11\11\1\1\11\2\1\1\11"+
    "\20\1\4\11\2\1\10\11\11\1\1\0\1\1\1\11"+
    "\2\1\1\11\5\1\1\11\5\1\1\0\1\11\1\0"+
    "\4\1\1\11\1\1\4\11\36\1\1\0\4\11\1\1"+
    "\1\11\4\1\1\0\1\11\1\0\1\11\12\1\7\0"+
    "\1\1\1\0\34\1\1\11\5\1\1\0\1\1\1\0"+
    "\12\1\2\0\1\11\1\0\2\1\1\11\2\0\31\1"+
    "\1\11\6\1\5\0\25\1\2\11\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** nesting level of rule */
  private int nestLevel = 0;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  int startCommentPos;
  int startCommentLine;
  int endCommentState;

  int endPragmaState;

  public _XdsFlexScanner() {
    this((java.io.Reader)null);
  }

  /**
   * Returns the number of characters up to the start of the matched text.
   */
  public final int getTokenOffset() {
    return zzStartRead;
  }

  public TextPosition getTokenPosition() {
    return new TextPosition(yyline + 1, yycolumn + 1, getTokenOffset());
  }

  public TokenRestorePosition getTokenRestorePosition() {
    return new TokenRestorePosition(yyline, yycolumn, getTokenOffset(), yystate());
  }

  public void setPosition(TokenRestorePosition position) {
    setPosition( position.getOffset()
               , position.getLine(), position.getColumn()
               , position.getState() ); 
  }


  public _XdsFlexScanner(java.io.Reader in) {
    zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _XdsFlexScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1326) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final void reset(CharSequence buffer){
    reset(buffer, YYINITIAL);
  }

  public final void reset(CharSequence buffer, int initialState){
    zzBuffer  = buffer;
    zzEndRead = buffer.length();
    setPosition(0, 0, 0, initialState);
  }
  
  public final void setPosition(int start, int line, int column, int initialState) {
    nestLevel = 0;
    zzCurrentPos  = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF   = false;
    zzAtBOL   = (column == 0);
    yychar    = 0;
    yyline    = line;
    yycolumn  = column;
    yybegin(initialState);
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TokenType nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL.charAt(zzCurrentPosL)) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return IDENTIFIER;
          }
        case 118: break;
        case 80: 
          { return BLOCK_COMMENT;
          }
        case 119: break;
        case 50: 
          { return IN_KEYWORD;
          }
        case 120: break;
        case 55: 
          { nestLevel--; 
                           if (nestLevel == 0) {
                               zzStartRead = startCommentPos;
                               yyline = startCommentLine;
                               yybegin(endCommentState);
                               return BLOCK_COMMENT;
                           }
          }
        case 121: break;
        case 115: 
          { return QUALIFIED_KEYWORD;
          }
        case 122: break;
        case 21: 
          { return AND;
          }
        case 123: break;
        case 97: 
          { return RETRY_KEYWORD;
          }
        case 124: break;
        case 33: 
          { return BY_KEYWORD;
          }
        case 125: break;
        case 116: 
          { return DEFINITION_KEYWORD;
          }
        case 126: break;
        case 109: 
          { return POINTER_KEYWORD;
          }
        case 127: break;
        case 105: 
          { return RECORD_KEYWORD;
          }
        case 128: break;
        case 16: 
          { return RBRACKET;
          }
        case 129: break;
        case 110: 
          { return FORWARD_KEYWORD;
          }
        case 130: break;
        case 19: 
          { return COLON;
          }
        case 131: break;
        case 48: 
          { return OF_KEYWORD;
          }
        case 132: break;
        case 46: 
          { return GTEQ;
          }
        case 133: break;
        case 98: 
          { return LABEL_KEYWORD;
          }
        case 134: break;
        case 85: 
          { return THEN_KEYWORD;
          }
        case 135: break;
        case 44: 
          { return LTEQ;
          }
        case 136: break;
        case 64: 
          { return SEQ_KEYWORD;
          }
        case 137: break;
        case 87: 
          { return FROM_KEYWORD;
          }
        case 138: break;
        case 94: 
          { return CONST_KEYWORD;
          }
        case 139: break;
        case 78: 
          { return CASE_KEYWORD;
          }
        case 140: break;
        case 20: 
          { return BAR;
          }
        case 141: break;
        case 102: 
          { return PRAGMA_PUSH;
          }
        case 142: break;
        case 58: 
          { yypushback(2); 
                   return DEC_INTEGER_LITERAL;
          }
        case 143: break;
        case 65: 
          { return ASM_KEYWORD;
          }
        case 144: break;
        case 91: 
          { return LONG_COMPLEX_LITERAL;
          }
        case 145: break;
        case 96: 
          { return ARRAY_KEYWORD;
          }
        case 146: break;
        case 15: 
          { return LBRACKET;
          }
        case 147: break;
        case 25: 
          { return EQU;
          }
        case 148: break;
        case 22: 
          { return SEMICOLON;
          }
        case 149: break;
        case 41: 
          { return EXPONENT;
          }
        case 150: break;
        case 83: 
          { endPragmaState = yystate();
                              yybegin(IN_PRAGMA_BLOCK);
                              return PRAGMA_ARGS_POPPUSH_BEGIN;
          }
        case 151: break;
        case 23: 
          { return COMMA;
          }
        case 152: break;
        case 82: 
          { endPragmaState = yystate();
                              yybegin(IN_PRAGMA_BLOCK);
                              return PRAGMA_ARGS_POP_BEGIN;
          }
        case 153: break;
        case 89: 
          { return WITH_KEYWORD;
          }
        case 154: break;
        case 59: 
          { return COMPLEX_LITERAL;
          }
        case 155: break;
        case 112: 
          { return DEFINED_PRAGMA_KEYWORD;
          }
        case 156: break;
        case 39: 
          { nestLevel = 1; 
                          startCommentPos  = zzStartRead;
                          startCommentLine = yyline;
                          endCommentState  = yystate();
                          yybegin(IN_CPP_BLOCK_COMMENT);
          }
        case 157: break;
        case 100: 
          { return EXCEPT_KEYWORD;
          }
        case 158: break;
        case 56: 
          { nestLevel--; 
                              if (nestLevel == 0) {
                                 zzStartRead = startCommentPos;
                                 yyline = startCommentLine;
                                 yybegin(endCommentState);
                                 return CPP_BLOCK_COMMENT;
                              }
          }
        case 159: break;
        case 5: 
          { return PLUS;
          }
        case 160: break;
        case 54: 
          { nestLevel++;
          }
        case 161: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 162: break;
        case 36: 
          { return STRING_LITERAL;
          }
        case 163: break;
        case 11: 
          { return RPARENTH;
          }
        case 164: break;
        case 93: 
          { return ELSIF_KEYWORD;
          }
        case 165: break;
        case 10: 
          { return TIMES;
          }
        case 166: break;
        case 38: 
          { return CPP_END_OF_LINE_COMMENT;
          }
        case 167: break;
        case 103: 
          { return PRAGMA_POP;
          }
        case 168: break;
        case 47: 
          { return OR_KEYWORD;
          }
        case 169: break;
        case 92: 
          { return BEGIN_KEYWORD;
          }
        case 170: break;
        case 37: 
          { return END_OF_LINE_COMMENT;
          }
        case 171: break;
        case 40: 
          { nestLevel = 1;
                          startCommentPos  = zzStartRead;
                          startCommentLine = yyline;
                          endCommentState  = yystate();
                          yybegin(IN_BLOCK_COMMENT);
          }
        case 172: break;
        case 31: 
          { return CHAR_OCT_LITERAL;
          }
        case 173: break;
        case 60: 
          { return END_KEYWORD;
          }
        case 174: break;
        case 6: 
          { return DOT;
          }
        case 175: break;
        case 88: 
          { return LOOP_KEYWORD;
          }
        case 176: break;
        case 66: 
          { return AND_KEYWORD;
          }
        case 177: break;
        case 45: 
          { return RIGHT_SHIFT;
          }
        case 178: break;
        case 28: 
          { return OCT_INTEGER_LITERAL;
          }
        case 179: break;
        case 70: 
          { return FOR_KEYWORD;
          }
        case 180: break;
        case 76: 
          { return EXIT_KEYWORD;
          }
        case 181: break;
        case 67: 
          { return NOT_KEYWORD;
          }
        case 182: break;
        case 4: 
          { return DEC_INTEGER_LITERAL;
          }
        case 183: break;
        case 26: 
          { return NEQ;
          }
        case 184: break;
        case 53: 
          { return BECOMES;
          }
        case 185: break;
        case 18: 
          { return RBRACE;
          }
        case 186: break;
        case 35: 
          { return DO_KEYWORD;
          }
        case 187: break;
        case 77: 
          { return ELSE_KEYWORD;
          }
        case 188: break;
        case 49: 
          { return IS_KEYWORD;
          }
        case 189: break;
        case 42: 
          { endPragmaState = yystate();
                    yybegin(IN_PRAGMA_BLOCK);
                    return PRAGMA_BEGIN;
          }
        case 190: break;
        case 74: 
          { return NEW_PRAGMA_KEYWORD;
          }
        case 191: break;
        case 9: 
          { return LPARENTH;
          }
        case 192: break;
        case 30: 
          { return REAL_LITERAL;
          }
        case 193: break;
        case 81: 
          { endPragmaState = yystate();
                              yybegin(IN_PRAGMA_BLOCK);
                              return PRAGMA_ARGS_PUSH_BEGIN;
          }
        case 194: break;
        case 79: 
          { return CPP_BLOCK_COMMENT;
          }
        case 195: break;
        case 17: 
          { return LBRACE;
          }
        case 196: break;
        case 43: 
          { return LEFT_SHIFT;
          }
        case 197: break;
        case 62: 
          { endPragmaState = yystate();
                              yybegin(IN_PRAGMA_BLOCK);
                              return PRAGMA_ARGS_BEGIN;
          }
        case 198: break;
        case 13: 
          { return GTR;
          }
        case 199: break;
        case 12: 
          { return LSS;
          }
        case 200: break;
        case 61: 
          { return DIV_KEYWORD;
          }
        case 201: break;
        case 63: 
          { return SET_KEYWORD;
          }
        case 202: break;
        case 86: 
          { return TYPE_KEYWORD;
          }
        case 203: break;
        case 73: 
          { return POP_PRAGMA_KEYWORD;
          }
        case 204: break;
        case 8: 
          { return SLASH;
          }
        case 205: break;
        case 69: 
          { return REM_KEYWORD;
          }
        case 206: break;
        case 24: 
          { return NOT;
          }
        case 207: break;
        case 51: 
          { return IF_KEYWORD;
          }
        case 208: break;
        case 29: 
          { return HEX_INTEGER_LITERAL;
          }
        case 209: break;
        case 68: 
          { return MOD_KEYWORD;
          }
        case 210: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 211: break;
        case 99: 
          { return WHILE_KEYWORD;
          }
        case 212: break;
        case 32: 
          { return CHAR_HEX_LITERAL;
          }
        case 213: break;
        case 95: 
          { return UNTIL_KEYWORD;
          }
        case 214: break;
        case 71: 
          { return VAR_KEYWORD;
          }
        case 215: break;
        case 104: 
          { return MODULE_KEYWORD;
          }
        case 216: break;
        case 114: 
          { return PROCEDURE_KEYWORD;
          }
        case 217: break;
        case 84: 
          { return GOTO_KEYWORD;
          }
        case 218: break;
        case 14: 
          { return SEP;
          }
        case 219: break;
        case 52: 
          { return TO_KEYWORD;
          }
        case 220: break;
        case 117: 
          { return IMPLEMENTATION_KEYWORD;
          }
        case 221: break;
        case 107: 
          { return RETURN_KEYWORD;
          }
        case 222: break;
        case 7: 
          { return MINUS;
          }
        case 223: break;
        case 106: 
          { return REPEAT_KEYWORD;
          }
        case 224: break;
        case 34: 
          { return RANGE;
          }
        case 225: break;
        case 90: 
          { return PUSH_PRAGMA_KEYWORD;
          }
        case 226: break;
        case 113: 
          { return PACKEDSET_KEYWORD;
          }
        case 227: break;
        case 72: 
          { return ALIAS;
          }
        case 228: break;
        case 75: 
          { return LONG_REAL_LITERAL;
          }
        case 229: break;
        case 57: 
          { yybegin(endPragmaState);
                  return PRAGMA_END;
          }
        case 230: break;
        case 101: 
          { return EXPORT_KEYWORD;
          }
        case 231: break;
        case 111: 
          { return FINALLY_KEYWORD;
          }
        case 232: break;
        case 108: 
          { return IMPORT_KEYWORD;
          }
        case 233: break;
        case 27: 
          { 
          }
        case 234: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case IN_BLOCK_COMMENT: {
              zzStartRead = startCommentPos;
                           yyline = startCommentLine;
                           yybegin(endCommentState); 
                           return BLOCK_COMMENT;
            }
            case 313: break;
            case IN_CPP_BLOCK_COMMENT: {
              zzStartRead = startCommentPos;
                              yyline = startCommentLine;
                              yybegin(endCommentState); 
                              return CPP_BLOCK_COMMENT;
            }
            case 314: break;
            default:
              {
                return EOF;
              }
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
