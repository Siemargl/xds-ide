IllegalCharacter=illegal character
IllegalNumber=illegal number
IdentifierExpected=identifier expected
ExpectedSymbol=expected symbol "{0}"

UndeclaredIdentifier=undeclared identifier "{0}"
IdentifierAlreadyDefined=identifier "{0}" was already defined at "{1}"[{2}:{3}]

RecursiveImportDisabled=recursive import not allowed
UnsatisfiedExportedObject=unsatisfied exported object "{0}"

IncompatibleTypes=incompatible types
IdentifierDoesNotDenoteType=identifier "{0}" does not denote a type
ExpectedType=type expected
ExpectedOrdinalType=ordinal type expected
IllegalOpenArrayTypeUsage=illegal usage of open array type

ObjectIsNotArray=object is not array
ObjectIsNotRecord=object is not record
ObjectIsNotPointer=object is not pointer
ObjectIsNotVariable=object is not variable

ObjectIsNotPointerOrRecord=object is neither a pointer nor a VAR-parameter record

PointerNotBoundRecord=pointer not bound to record
BaseTypeOfOpenArrayAggregateShuldBeSimple=base type of open array aggregate should be a simple type
OberonTypeIsRequired=non-Oberon type cannot be used in specific Oberon-2 construct
 
ExpectedStartOfFactor=expected start of factor
ExpectedDeclarationStart=expected start of declaration
ExpectedTypeStart=expected start of type
ExpectedStartOfStatement=expected start of statement
ProcedureNotImplemented=procedure not implemented "{0}"

NotAllowedInDefinitionModule=not allowed in definition module
AllowedOnlyInGlobalScope=allowed only in global scope
UnsatisfiedForwardType=unsatisfied forward type "{0}"

IllegalDeclarationOrder=illegal order of declarations
ExtensionNotAllowed=language extension is not allowed {0}

ForwardTypeCannotBeOpaque=forward type cannot be opaque
ExpressionForFieldWasExpected=expression for field "{0}" was expected

TypeIsNotDefined=type of "{0}" is not defined yet
VariantFieldsNotAllowedInOberonRecord=variant fields are not allowed in Oberon record
ExpressionOutOfBounds=expression out of bounds
ReadOnlyDesignator=designator is read-only
LowBoundGreaterThanHighBound=low bound greater than high bound

ForLoopControlVariableMustBeLocal=FOR-loop control variable must be declared in the local scope
MoreExpressionsThanFieldsInRecord=more expressions than fields in a record type

InterruptProceduresNotImplemented=interrupt procedures are not implemented yet
NotAllowedInOberon=not allowed in Oberon

ForLoopControlVariableMustNotBeFormalParameter=FOR-loop control variable must not be a formal parameter
ForLoopControlVariableCannotBeExported=control variable cannot be exported

InvalidLanguageValue=invalid value of explicit language specification
InvalidParameterSpecificationExpectedNIL=invalid parameter specification: expected NIL
ControlVariableCannotBeVolatile=control variable can not be volatile
LanguageIsNotValidForExternalProcedure=Language is not valid for external procedure
DirectLanguageSpecification=(direct language specification)

IllegalConditionCompilation=illegal structure of conditional compilation commands
InvalidPragmaSyntax=invalid pragma syntax
IllegalConditionCompilationAtPosition=illegal structure of conditional compilation commands started at [{0}]

ImplicitSystemCast=implicit usage of the SYSTEM.CAST

CaseWithoutElsePart=CASE statement without ELSE
UnknownOption=undeclared option "{0}"
OptionAlreadyDefined=option "{0}" is already defined
UnknownEquation=undeclared equation "{0}"
EquationAlreadyDefined=equation "{0}" is already defined
ModuleConstructorWillNotBeInvoked=Import of module "{0}" with body to module without body

StringExpected=string expected

UnresolvedModuleName=cannot resolve module name "{0}"
CannotFindDefinitionModule=cannot find defintion module "{0}"

ArrayRecotdSimpleAgregate=(array or record or simple aggregate)
ObsoleteTypeCast=(obsolete type cast)
ReadOnlyTag=(read-only tag)
SpecialKindsParameters=(special kinds of parameters)
ReadOnlyParameters=(read-only parameters)
UnusedParameters=(unused parameters)
ParameterValueByDefault=(parameter value by default)
SeqParameter=(SEQ parameter)
ArrayOfType=(ARRAY OF type)
RenamingInImport=(renaming in import)
ExponentiationOperator=(exponentiation operator)
IsoPragmaSyntax=(ISO pragma syntax)
UseOptionCppComments=, use the CPPCOMMENTS option
UseCppLineComments=, use "//" instead of "--"
UseCppBlockComments=, use "/*" instead of "*)"

DefinitionModuleOption=option "{0}" is allowed only within definition module
KeywordDisabledByK26Option=usage of "{0}" keyword is disabled by "K26" option

ImportFromObjectIllegal=import from object "{0}" is illegal


OutlineNodeText_ImportList=import list
OutlineNodeText_VariantRecord=variant record
OutlineNodeText_Variant=variant

ImportCycleDetected=Module %s participate in import cycle : %s