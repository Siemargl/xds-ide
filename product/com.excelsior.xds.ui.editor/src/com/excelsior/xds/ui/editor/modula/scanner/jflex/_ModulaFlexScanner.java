/* The following code was generated by JFlex 1.4.3 on 02.03.16 11:00 */

package com.excelsior.xds.ui.editor.modula.scanner.jflex;

import com.excelsior.xds.ui.editor.modula.ModulaTokens;
import com.excelsior.xds.ui.editor.commons.scanner.jflex.IFlexScanner;
import com.excelsior.xds.ui.commons.syntaxcolor.TokenDescriptor;
import com.excelsior.xds.ui.commons.syntaxcolor.SpecialTokenDescriptors;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 02.03.16 11:00 from the specification file
 * <tt>modula2.flex</tt>
 */
public class _ModulaFlexScanner implements IFlexScanner {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\1\1\0\2\1\22\0\1\1\5\0\1\44\1\0\1\16"+
    "\1\16\1\0\1\14\1\0\1\14\1\15\1\0\1\5\1\57\1\62"+
    "\1\61\1\63\1\5\1\60\1\5\1\56\1\6\7\0\1\17\1\26"+
    "\1\10\1\23\1\13\1\33\1\27\1\11\1\30\1\3\1\42\1\35"+
    "\1\21\1\22\1\31\1\37\1\43\1\24\1\20\1\32\1\41\1\34"+
    "\1\40\1\36\1\25\1\45\1\16\1\0\1\16\1\0\1\2\1\0"+
    "\3\7\1\55\1\54\1\7\1\53\1\12\1\46\4\3\1\47\1\65"+
    "\3\3\1\52\1\50\1\51\1\64\3\3\1\66\1\16\1\0\1\16"+
    "\1\44\53\0\1\3\12\0\1\3\4\0\1\3\5\0\27\3\1\0"+
    "\37\3\1\0\u01ca\3\4\0\14\3\16\0\5\3\7\0\1\3\1\0"+
    "\1\3\201\0\5\3\1\0\2\3\2\0\4\3\10\0\1\3\1\0"+
    "\3\3\1\0\1\3\1\0\24\3\1\0\123\3\1\0\213\3\10\0"+
    "\236\3\11\0\46\3\2\0\1\3\7\0\47\3\110\0\33\3\5\0"+
    "\3\3\55\0\53\3\25\0\12\4\4\0\2\3\1\0\143\3\1\0"+
    "\1\3\17\0\2\3\7\0\2\3\12\4\3\3\2\0\1\3\20\0"+
    "\1\3\1\0\36\3\35\0\131\3\13\0\1\3\16\0\12\4\41\3"+
    "\11\0\2\3\4\0\1\3\5\0\26\3\4\0\1\3\11\0\1\3"+
    "\3\0\1\3\27\0\31\3\107\0\1\3\1\0\13\3\127\0\66\3"+
    "\3\0\1\3\22\0\1\3\7\0\12\3\4\0\12\4\1\0\7\3"+
    "\1\0\7\3\5\0\10\3\2\0\2\3\2\0\26\3\1\0\7\3"+
    "\1\0\1\3\3\0\4\3\3\0\1\3\20\0\1\3\15\0\2\3"+
    "\1\0\3\3\4\0\12\4\2\3\23\0\6\3\4\0\2\3\2\0"+
    "\26\3\1\0\7\3\1\0\2\3\1\0\2\3\1\0\2\3\37\0"+
    "\4\3\1\0\1\3\7\0\12\4\2\0\3\3\20\0\11\3\1\0"+
    "\3\3\1\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3\3\0"+
    "\1\3\22\0\1\3\17\0\2\3\4\0\12\4\25\0\10\3\2\0"+
    "\2\3\2\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3\3\0"+
    "\1\3\36\0\2\3\1\0\3\3\4\0\12\4\1\0\1\3\21\0"+
    "\1\3\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0"+
    "\1\3\1\0\2\3\3\0\2\3\3\0\3\3\3\0\14\3\26\0"+
    "\1\3\25\0\12\4\25\0\10\3\1\0\3\3\1\0\27\3\1\0"+
    "\12\3\1\0\5\3\3\0\1\3\32\0\2\3\6\0\2\3\4\0"+
    "\12\4\25\0\10\3\1\0\3\3\1\0\27\3\1\0\12\3\1\0"+
    "\5\3\3\0\1\3\40\0\1\3\1\0\2\3\4\0\12\4\1\0"+
    "\2\3\22\0\10\3\1\0\3\3\1\0\51\3\2\0\1\3\20\0"+
    "\1\3\21\0\2\3\4\0\12\4\12\0\6\3\5\0\22\3\3\0"+
    "\30\3\1\0\11\3\1\0\1\3\2\0\7\3\72\0\60\3\1\0"+
    "\2\3\14\0\7\3\11\0\12\4\47\0\2\3\1\0\1\3\2\0"+
    "\2\3\1\0\1\3\2\0\1\3\6\0\4\3\1\0\7\3\1\0"+
    "\3\3\1\0\1\3\1\0\1\3\2\0\2\3\1\0\4\3\1\0"+
    "\2\3\11\0\1\3\2\0\5\3\1\0\1\3\11\0\12\4\2\0"+
    "\4\3\40\0\1\3\37\0\12\4\26\0\10\3\1\0\44\3\33\0"+
    "\5\3\163\0\53\3\24\0\1\3\12\4\6\0\6\3\4\0\4\3"+
    "\3\0\1\3\3\0\2\3\7\0\3\3\4\0\15\3\14\0\1\3"+
    "\1\0\12\4\6\0\46\3\1\0\1\3\5\0\1\3\2\0\53\3"+
    "\1\0\u014d\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4\3"+
    "\2\0\51\3\1\0\4\3\2\0\41\3\1\0\4\3\2\0\7\3"+
    "\1\0\1\3\1\0\4\3\2\0\17\3\1\0\71\3\1\0\4\3"+
    "\2\0\103\3\45\0\20\3\20\0\125\3\14\0\u026c\3\2\0\21\3"+
    "\1\0\32\3\5\0\113\3\25\0\15\3\1\0\4\3\16\0\22\3"+
    "\16\0\22\3\16\0\15\3\1\0\3\3\17\0\64\3\43\0\1\3"+
    "\4\0\1\3\3\0\12\4\46\0\12\4\6\0\130\3\10\0\51\3"+
    "\1\0\1\3\5\0\106\3\12\0\35\3\51\0\12\4\36\3\2\0"+
    "\5\3\13\0\54\3\25\0\7\3\10\0\12\4\46\0\27\3\11\0"+
    "\65\3\53\0\12\4\6\0\12\4\15\0\1\3\135\0\57\3\21\0"+
    "\7\3\4\0\12\4\51\0\36\3\15\0\2\3\12\4\54\3\32\0"+
    "\44\3\34\0\12\4\3\0\3\3\12\4\44\3\153\0\4\3\1\0"+
    "\4\3\3\0\2\3\11\0\300\3\100\0\u0116\3\2\0\6\3\2\0"+
    "\46\3\2\0\6\3\2\0\10\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\37\3\2\0\65\3\1\0\7\3\1\0\1\3\3\0"+
    "\3\3\1\0\7\3\3\0\4\3\2\0\6\3\4\0\15\3\5\0"+
    "\3\3\1\0\7\3\164\0\1\3\15\0\1\3\20\0\15\3\145\0"+
    "\1\3\4\0\1\3\2\0\12\3\1\0\1\3\3\0\5\3\6\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\4\3\1\0\13\3\2\0"+
    "\4\3\5\0\5\3\4\0\1\3\64\0\2\3\u0a7b\0\57\3\1\0"+
    "\57\3\1\0\205\3\6\0\4\3\3\0\2\3\14\0\46\3\1\0"+
    "\1\3\5\0\1\3\2\0\70\3\7\0\1\3\20\0\27\3\11\0"+
    "\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0"+
    "\7\3\1\0\7\3\1\0\7\3\120\0\1\3\u01d5\0\2\3\52\0"+
    "\5\3\5\0\2\3\4\0\126\3\6\0\3\3\1\0\132\3\1\0"+
    "\4\3\5\0\51\3\3\0\136\3\21\0\33\3\65\0\20\3\u0200\0"+
    "\u19b6\3\112\0\u51cd\3\63\0\u048d\3\103\0\56\3\2\0\u010d\3\3\0"+
    "\20\3\12\4\2\3\24\0\57\3\20\0\31\3\10\0\106\3\61\0"+
    "\11\3\2\0\147\3\2\0\4\3\1\0\4\3\14\0\13\3\115\0"+
    "\12\3\1\0\3\3\1\0\4\3\1\0\27\3\35\0\64\3\16\0"+
    "\62\3\34\0\12\4\30\0\6\3\3\0\1\3\4\0\12\4\34\3"+
    "\12\0\27\3\31\0\35\3\7\0\57\3\34\0\1\3\12\4\46\0"+
    "\51\3\27\0\3\3\1\0\10\3\4\0\12\4\6\0\27\3\3\0"+
    "\1\3\5\0\60\3\1\0\1\3\3\0\2\3\2\0\5\3\2\0"+
    "\1\3\1\0\1\3\30\0\3\3\2\0\13\3\7\0\3\3\14\0"+
    "\6\3\2\0\6\3\2\0\6\3\11\0\7\3\1\0\7\3\221\0"+
    "\43\3\15\0\12\4\6\0\u2ba4\3\14\0\27\3\4\0\61\3\u2104\0"+
    "\u016e\3\2\0\152\3\46\0\7\3\14\0\5\3\5\0\1\3\1\0"+
    "\12\3\1\0\15\3\1\0\5\3\1\0\1\3\1\0\2\3\1\0"+
    "\2\3\1\0\154\3\41\0\u016b\3\22\0\100\3\2\0\66\3\50\0"+
    "\14\3\164\0\5\3\1\0\207\3\23\0\12\4\7\0\32\3\6\0"+
    "\32\3\13\0\131\3\3\0\6\3\2\0\6\3\2\0\6\3\2\0"+
    "\3\3\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\2\3\4\1\1\4\22\1"+
    "\1\5\4\1\1\0\3\3\1\6\32\1\2\5\2\1"+
    "\1\5\3\1\3\5\31\1\1\3\1\0\1\7\17\1"+
    "\1\5\4\1\1\5\1\1\1\10\14\1\1\5\1\1"+
    "\1\5\6\1\1\5\2\1\1\6\15\1\1\3\1\0"+
    "\1\6\37\1\1\5\42\1\1\6\37\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\67\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\67\0\u0604\0\u063b"+
    "\0\u0672\0\u06a9\0\u06e0\0\u06e0\0\67\0\u0717\0\245\0\u074e"+
    "\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906"+
    "\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe"+
    "\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76"+
    "\0\u0cad\0\245\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7"+
    "\0\u0e2e\0\u0e65\0\u0e9c\0\u0898\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78"+
    "\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130"+
    "\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8"+
    "\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\67"+
    "\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621"+
    "\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9"+
    "\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\245\0\u195a"+
    "\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12"+
    "\0\u1b49\0\u1b80\0\u1bb7\0\u1a36\0\u1bee\0\u1c25\0\u1c5c\0\u1c93"+
    "\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b"+
    "\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003"+
    "\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u214d\0\u2184"+
    "\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c"+
    "\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4"+
    "\0\u252b\0\u2562\0\u0d89\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675"+
    "\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d"+
    "\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5"+
    "\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d"+
    "\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55"+
    "\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d"+
    "\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\u308e\0\u30c5"+
    "\0\u30fc\0\u3133\0\u316a\0\u31a1\0\u31d8\0\u320f\0\u3246\0\u327d"+
    "\0\u32b4\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7\0\u33fe\0\u3435"+
    "\0\u346c\0\u34a3\0\u34da\0\u3511\0\u3548\0\u357f\0\u35b6\0\u35ed"+
    "\0\u3624\0\u365b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\2\1\5\1\6\1\4\1\7"+
    "\1\10\1\4\1\11\1\2\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\4\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\4\1\32\1\33"+
    "\1\34\1\4\1\35\1\36\1\4\1\37\2\4\1\40"+
    "\1\41\3\4\1\6\5\5\1\42\2\4\70\0\1\3"+
    "\67\0\12\4\3\0\25\4\1\0\22\4\5\0\1\5"+
    "\1\6\1\43\1\44\2\45\1\43\1\0\1\46\1\0"+
    "\1\43\3\0\1\43\2\0\1\43\4\0\1\43\20\0"+
    "\2\43\1\6\5\5\10\0\2\6\2\43\2\45\1\43"+
    "\1\0\1\46\1\0\1\43\3\0\1\43\2\0\1\43"+
    "\4\0\1\43\20\0\2\43\6\6\5\0\6\4\1\47"+
    "\1\50\2\4\3\0\1\51\1\4\1\52\7\4\1\53"+
    "\12\4\1\0\22\4\2\0\12\4\3\0\1\54\10\4"+
    "\1\55\13\4\1\0\22\4\2\0\12\4\3\0\3\4"+
    "\1\56\12\4\1\57\1\60\5\4\1\0\22\4\15\0"+
    "\1\2\53\0\12\4\3\0\1\4\1\61\1\4\1\56"+
    "\1\62\1\63\1\4\1\64\15\4\1\0\22\4\2\0"+
    "\7\4\1\65\1\4\1\66\3\0\6\4\1\67\2\4"+
    "\1\70\10\4\1\71\2\4\1\0\22\4\2\0\12\4"+
    "\3\0\1\72\10\4\1\73\1\74\12\4\1\0\22\4"+
    "\2\0\11\4\1\75\3\0\11\4\1\76\1\77\12\4"+
    "\1\0\22\4\2\0\11\4\1\100\3\0\11\4\1\101"+
    "\1\102\12\4\1\0\22\4\2\0\11\4\1\103\3\0"+
    "\12\4\1\104\12\4\1\0\22\4\2\0\11\4\1\105"+
    "\3\0\6\4\1\106\2\4\1\107\1\110\12\4\1\0"+
    "\22\4\2\0\11\4\1\111\3\0\25\4\1\0\22\4"+
    "\2\0\12\4\3\0\2\4\1\112\1\113\10\4\1\102"+
    "\10\4\1\0\22\4\2\0\12\4\3\0\4\4\1\56"+
    "\1\114\6\4\1\102\10\4\1\0\22\4\2\0\7\4"+
    "\1\115\2\4\3\0\1\4\1\116\3\4\1\117\1\120"+
    "\3\4\1\102\12\4\1\0\22\4\2\0\12\4\3\0"+
    "\1\121\4\4\1\122\3\4\1\123\1\124\3\4\1\125"+
    "\6\4\1\0\22\4\2\0\12\4\3\0\1\126\24\4"+
    "\1\0\22\4\2\0\11\4\1\127\3\0\12\4\1\130"+
    "\1\4\1\131\10\4\1\0\22\4\2\0\12\4\3\0"+
    "\1\132\4\4\1\133\4\4\1\134\7\4\1\111\2\4"+
    "\1\0\22\4\2\0\7\4\1\135\2\4\3\0\11\4"+
    "\1\136\1\137\12\4\1\0\22\4\2\0\12\4\3\0"+
    "\3\4\1\140\21\4\1\0\22\4\2\0\12\4\3\0"+
    "\22\4\1\141\2\4\1\0\22\4\2\0\12\4\3\0"+
    "\25\4\1\0\2\4\1\142\17\4\2\0\12\4\3\0"+
    "\25\4\1\0\2\4\1\143\17\4\2\0\12\4\3\0"+
    "\25\4\1\0\1\4\1\144\20\4\2\0\12\4\3\0"+
    "\25\4\1\0\20\4\1\145\1\4\5\0\4\43\2\45"+
    "\1\43\3\0\1\43\3\0\1\43\2\0\1\43\4\0"+
    "\1\43\20\0\10\43\10\0\2\146\4\0\1\147\1\0"+
    "\1\150\40\0\6\146\5\0\12\4\3\0\1\151\4\4"+
    "\1\102\17\4\1\0\22\4\2\0\12\4\3\0\1\4"+
    "\1\152\3\4\1\153\12\4\1\102\4\4\1\0\22\4"+
    "\2\0\12\4\3\0\20\4\1\154\4\4\1\0\22\4"+
    "\2\0\12\4\3\0\2\4\1\155\1\156\21\4\1\0"+
    "\22\4\2\0\12\4\3\0\16\4\1\77\6\4\1\0"+
    "\22\4\2\0\12\4\3\0\10\4\1\157\14\4\1\0"+
    "\22\4\2\0\12\4\3\0\4\4\1\102\20\4\1\0"+
    "\22\4\2\0\12\4\3\0\1\4\1\160\23\4\1\0"+
    "\22\4\2\0\6\4\1\161\3\4\3\0\11\4\1\77"+
    "\6\4\1\162\4\4\1\0\22\4\2\0\12\4\3\0"+
    "\1\4\1\163\1\102\22\4\1\0\22\4\2\0\12\4"+
    "\3\0\4\4\1\164\1\47\17\4\1\0\22\4\2\0"+
    "\12\4\3\0\5\4\1\165\17\4\1\0\22\4\2\0"+
    "\12\4\3\0\1\4\1\102\23\4\1\0\22\4\2\0"+
    "\12\4\3\0\11\4\1\166\1\167\12\4\1\0\22\4"+
    "\2\0\12\4\3\0\13\4\1\170\10\4\1\102\1\0"+
    "\22\4\2\0\12\4\3\0\1\4\1\171\23\4\1\0"+
    "\22\4\2\0\12\4\3\0\25\4\1\0\1\172\21\4"+
    "\2\0\12\4\3\0\7\4\1\173\15\4\1\0\22\4"+
    "\2\0\12\4\3\0\17\4\1\102\3\4\1\174\1\4"+
    "\1\0\22\4\2\0\12\4\3\0\3\4\1\102\21\4"+
    "\1\0\22\4\2\0\12\4\3\0\4\4\1\175\10\4"+
    "\1\176\7\4\1\0\22\4\2\0\12\4\3\0\21\4"+
    "\1\102\3\4\1\0\22\4\2\0\12\4\3\0\16\4"+
    "\1\177\6\4\1\0\22\4\2\0\12\4\3\0\13\4"+
    "\1\102\11\4\1\0\22\4\2\0\6\4\1\102\3\4"+
    "\3\0\14\4\1\200\10\4\1\0\22\4\2\0\12\4"+
    "\3\0\1\4\1\201\12\4\1\202\1\102\7\4\1\0"+
    "\22\4\2\0\6\4\1\203\3\4\3\0\1\204\1\4"+
    "\1\102\10\4\1\205\1\47\3\4\1\206\4\4\1\0"+
    "\22\4\2\0\12\4\3\0\13\4\1\207\11\4\1\0"+
    "\22\4\2\0\12\4\3\0\10\4\1\210\14\4\1\0"+
    "\22\4\2\0\12\4\3\0\13\4\1\176\11\4\1\0"+
    "\22\4\2\0\12\4\3\0\13\4\1\211\11\4\1\0"+
    "\22\4\2\0\12\4\3\0\12\4\1\212\12\4\1\0"+
    "\22\4\2\0\12\4\3\0\13\4\1\47\11\4\1\0"+
    "\22\4\2\0\12\4\3\0\20\4\1\213\4\4\1\0"+
    "\22\4\2\0\6\4\1\214\3\4\3\0\4\4\1\215"+
    "\6\4\1\216\11\4\1\0\22\4\2\0\11\4\1\73"+
    "\3\0\25\4\1\0\22\4\2\0\12\4\3\0\11\4"+
    "\1\217\13\4\1\0\22\4\2\0\12\4\3\0\22\4"+
    "\1\220\2\4\1\0\22\4\2\0\12\4\3\0\20\4"+
    "\1\172\4\4\1\0\22\4\2\0\12\4\3\0\16\4"+
    "\1\221\6\4\1\0\22\4\2\0\12\4\3\0\12\4"+
    "\1\222\12\4\1\0\22\4\2\0\12\4\3\0\3\4"+
    "\1\223\12\4\1\224\6\4\1\0\22\4\2\0\12\4"+
    "\3\0\5\4\1\225\17\4\1\0\22\4\2\0\12\4"+
    "\3\0\12\4\1\226\12\4\1\0\22\4\2\0\12\4"+
    "\3\0\5\4\1\102\10\4\1\102\6\4\1\0\22\4"+
    "\2\0\12\4\3\0\3\4\1\227\21\4\1\0\22\4"+
    "\2\0\6\4\1\230\3\4\3\0\3\4\1\231\6\4"+
    "\1\232\12\4\1\0\22\4\2\0\12\4\3\0\16\4"+
    "\1\125\6\4\1\0\22\4\2\0\6\4\1\233\3\4"+
    "\3\0\25\4\1\0\22\4\2\0\12\4\3\0\12\4"+
    "\1\234\12\4\1\0\22\4\2\0\12\4\3\0\11\4"+
    "\1\235\13\4\1\0\22\4\2\0\12\4\3\0\11\4"+
    "\1\236\13\4\1\0\22\4\2\0\12\4\3\0\13\4"+
    "\1\157\11\4\1\0\22\4\2\0\12\4\3\0\5\4"+
    "\1\237\17\4\1\0\22\4\2\0\12\4\3\0\11\4"+
    "\1\240\1\4\1\241\11\4\1\0\22\4\2\0\12\4"+
    "\3\0\1\242\24\4\1\0\22\4\2\0\12\4\3\0"+
    "\25\4\1\0\3\4\1\47\16\4\2\0\12\4\3\0"+
    "\25\4\1\0\5\4\1\243\14\4\2\0\12\4\3\0"+
    "\25\4\1\0\21\4\1\244\2\0\12\4\3\0\25\4"+
    "\1\0\1\4\1\245\20\4\5\0\2\146\4\0\1\147"+
    "\42\0\6\146\10\0\2\246\5\0\1\247\41\0\6\246"+
    "\5\0\12\4\3\0\5\4\1\102\17\4\1\0\22\4"+
    "\2\0\11\4\1\102\3\0\13\4\1\47\11\4\1\0"+
    "\22\4\2\0\12\4\3\0\4\4\1\250\20\4\1\0"+
    "\22\4\2\0\12\4\3\0\16\4\1\251\6\4\1\0"+
    "\22\4\2\0\12\4\3\0\20\4\1\252\4\4\1\0"+
    "\22\4\2\0\12\4\3\0\1\4\1\77\23\4\1\0"+
    "\22\4\2\0\7\4\1\102\2\4\3\0\25\4\1\0"+
    "\22\4\2\0\11\4\1\102\3\0\11\4\1\253\13\4"+
    "\1\0\22\4\2\0\11\4\1\254\3\0\16\4\1\102"+
    "\6\4\1\0\22\4\2\0\12\4\3\0\12\4\1\255"+
    "\12\4\1\0\22\4\2\0\11\4\1\255\3\0\25\4"+
    "\1\0\22\4\2\0\12\4\3\0\1\256\4\4\1\257"+
    "\17\4\1\0\22\4\2\0\12\4\3\0\1\260\24\4"+
    "\1\0\22\4\2\0\12\4\3\0\14\4\1\111\10\4"+
    "\1\0\22\4\2\0\12\4\3\0\5\4\1\261\17\4"+
    "\1\0\22\4\2\0\12\4\3\0\25\4\1\0\11\4"+
    "\1\47\1\262\1\263\1\264\5\4\2\0\12\4\3\0"+
    "\13\4\1\265\11\4\1\0\22\4\2\0\11\4\1\102"+
    "\3\0\25\4\1\0\22\4\2\0\12\4\3\0\1\256"+
    "\24\4\1\0\22\4\2\0\11\4\1\173\3\0\25\4"+
    "\1\0\22\4\2\0\12\4\3\0\22\4\1\236\2\4"+
    "\1\0\22\4\2\0\11\4\1\47\3\0\25\4\1\0"+
    "\22\4\2\0\12\4\3\0\11\4\1\266\13\4\1\0"+
    "\22\4\2\0\12\4\3\0\20\4\1\267\4\4\1\0"+
    "\22\4\2\0\12\4\3\0\1\270\24\4\1\0\22\4"+
    "\2\0\12\4\3\0\12\4\1\271\12\4\1\0\22\4"+
    "\2\0\12\4\3\0\16\4\1\102\6\4\1\0\22\4"+
    "\2\0\12\4\3\0\5\4\1\260\14\4\1\272\2\4"+
    "\1\0\22\4\2\0\11\4\1\226\3\0\25\4\1\0"+
    "\22\4\2\0\12\4\3\0\1\273\24\4\1\0\22\4"+
    "\2\0\12\4\3\0\11\4\1\73\13\4\1\0\22\4"+
    "\2\0\12\4\3\0\1\4\1\274\23\4\1\0\22\4"+
    "\2\0\12\4\3\0\16\4\1\275\6\4\1\0\22\4"+
    "\2\0\12\4\3\0\12\4\1\255\3\4\1\276\6\4"+
    "\1\0\22\4\2\0\11\4\1\277\3\0\25\4\1\0"+
    "\22\4\2\0\11\4\1\300\3\0\25\4\1\0\11\4"+
    "\1\47\1\262\1\263\1\264\5\4\2\0\12\4\3\0"+
    "\25\4\1\0\1\176\21\4\2\0\11\4\1\177\3\0"+
    "\3\4\1\301\21\4\1\0\22\4\2\0\12\4\3\0"+
    "\1\4\1\302\23\4\1\0\22\4\2\0\12\4\3\0"+
    "\2\4\1\102\22\4\1\0\22\4\2\0\12\4\3\0"+
    "\1\303\24\4\1\0\22\4\2\0\12\4\3\0\16\4"+
    "\1\47\6\4\1\0\22\4\2\0\12\4\3\0\21\4"+
    "\1\304\3\4\1\0\22\4\2\0\12\4\3\0\1\77"+
    "\24\4\1\0\22\4\2\0\12\4\3\0\10\4\1\136"+
    "\14\4\1\0\22\4\2\0\12\4\3\0\1\4\1\305"+
    "\23\4\1\0\22\4\2\0\12\4\3\0\10\4\1\306"+
    "\14\4\1\0\22\4\2\0\12\4\3\0\20\4\1\102"+
    "\4\4\1\0\22\4\2\0\12\4\3\0\23\4\1\307"+
    "\1\4\1\0\22\4\2\0\6\4\1\310\3\4\3\0"+
    "\13\4\1\311\11\4\1\0\22\4\2\0\12\4\3\0"+
    "\3\4\1\312\21\4\1\0\22\4\2\0\12\4\3\0"+
    "\16\4\1\172\6\4\1\0\22\4\2\0\12\4\3\0"+
    "\4\4\1\47\20\4\1\0\22\4\2\0\12\4\3\0"+
    "\3\4\1\313\21\4\1\0\22\4\2\0\12\4\3\0"+
    "\11\4\1\204\13\4\1\0\22\4\2\0\12\4\3\0"+
    "\16\4\1\314\6\4\1\0\22\4\2\0\12\4\3\0"+
    "\25\4\1\0\1\4\1\315\20\4\2\0\12\4\3\0"+
    "\25\4\1\0\7\4\1\316\12\4\2\0\12\4\3\0"+
    "\25\4\1\0\10\4\1\47\11\4\5\0\2\246\47\0"+
    "\6\246\5\0\12\4\3\0\11\4\1\317\13\4\1\0"+
    "\11\4\1\47\1\262\1\263\1\264\5\4\2\0\12\4"+
    "\3\0\17\4\1\102\5\4\1\0\22\4\2\0\12\4"+
    "\3\0\16\4\1\320\6\4\1\0\22\4\2\0\12\4"+
    "\3\0\14\4\1\102\10\4\1\0\22\4\2\0\12\4"+
    "\3\0\20\4\1\77\4\4\1\0\22\4\2\0\12\4"+
    "\3\0\5\4\1\77\17\4\1\0\22\4\2\0\12\4"+
    "\3\0\4\4\1\321\20\4\1\0\22\4\2\0\11\4"+
    "\1\322\3\0\25\4\1\0\22\4\2\0\12\4\3\0"+
    "\6\4\1\102\16\4\1\0\22\4\2\0\12\4\3\0"+
    "\13\4\1\323\11\4\1\0\22\4\2\0\12\4\3\0"+
    "\25\4\1\0\13\4\1\47\6\4\2\0\12\4\3\0"+
    "\25\4\1\0\16\4\1\47\3\4\2\0\12\4\3\0"+
    "\25\4\1\0\15\4\1\47\4\4\2\0\11\4\1\324"+
    "\3\0\25\4\1\0\22\4\2\0\12\4\3\0\3\4"+
    "\1\325\21\4\1\0\22\4\2\0\12\4\3\0\12\4"+
    "\1\326\12\4\1\0\22\4\2\0\12\4\3\0\4\4"+
    "\1\327\20\4\1\0\22\4\2\0\12\4\3\0\5\4"+
    "\1\56\17\4\1\0\22\4\2\0\12\4\3\0\5\4"+
    "\1\73\17\4\1\0\22\4\2\0\11\4\1\77\3\0"+
    "\20\4\1\330\4\4\1\0\22\4\2\0\11\4\1\331"+
    "\3\0\25\4\1\0\11\4\1\47\1\262\1\4\1\264"+
    "\5\4\2\0\11\4\1\332\3\0\25\4\1\0\22\4"+
    "\2\0\12\4\3\0\17\4\1\47\5\4\1\0\22\4"+
    "\2\0\12\4\3\0\5\4\1\333\2\4\1\334\14\4"+
    "\1\0\22\4\2\0\6\4\1\102\3\4\3\0\25\4"+
    "\1\0\22\4\2\0\11\4\1\177\3\0\25\4\1\0"+
    "\22\4\2\0\12\4\3\0\16\4\1\335\6\4\1\0"+
    "\22\4\2\0\12\4\3\0\1\271\24\4\1\0\22\4"+
    "\2\0\12\4\3\0\20\4\1\336\4\4\1\0\22\4"+
    "\2\0\6\4\1\337\3\4\3\0\5\4\1\340\3\4"+
    "\1\341\13\4\1\0\22\4\2\0\11\4\1\342\3\0"+
    "\25\4\1\0\22\4\2\0\11\4\1\343\3\0\25\4"+
    "\1\0\22\4\2\0\11\4\1\344\3\0\25\4\1\0"+
    "\22\4\2\0\12\4\3\0\13\4\1\334\11\4\1\0"+
    "\22\4\2\0\12\4\3\0\13\4\1\345\11\4\1\0"+
    "\22\4\2\0\12\4\3\0\11\4\1\346\13\4\1\0"+
    "\22\4\2\0\12\4\3\0\25\4\1\0\6\4\1\347"+
    "\13\4\2\0\1\142\11\4\3\0\25\4\1\0\22\4"+
    "\2\0\12\4\3\0\3\4\1\350\21\4\1\0\22\4"+
    "\2\0\11\4\1\251\3\0\25\4\1\0\22\4\2\0"+
    "\12\4\3\0\5\4\1\47\17\4\1\0\22\4\2\0"+
    "\12\4\3\0\1\4\1\351\23\4\1\0\22\4\2\0"+
    "\6\4\1\304\3\4\3\0\11\4\1\341\13\4\1\0"+
    "\22\4\2\0\12\4\3\0\2\4\1\47\22\4\1\0"+
    "\22\4\2\0\12\4\3\0\11\4\1\352\13\4\1\0"+
    "\22\4\2\0\12\4\3\0\1\4\1\172\23\4\1\0"+
    "\22\4\2\0\12\4\3\0\5\4\1\353\17\4\1\0"+
    "\22\4\2\0\11\4\1\354\3\0\25\4\1\0\22\4"+
    "\2\0\12\4\3\0\1\73\24\4\1\0\22\4\2\0"+
    "\12\4\3\0\2\4\1\355\22\4\1\0\22\4\2\0"+
    "\12\4\3\0\5\4\1\356\17\4\1\0\22\4\2\0"+
    "\11\4\1\151\3\0\25\4\1\0\22\4\2\0\12\4"+
    "\3\0\16\4\1\260\6\4\1\0\22\4\2\0\11\4"+
    "\1\357\3\0\25\4\1\0\22\4\2\0\12\4\3\0"+
    "\12\4\1\360\12\4\1\0\22\4\2\0\11\4\1\350"+
    "\3\0\25\4\1\0\22\4\2\0\12\4\3\0\3\4"+
    "\1\77\21\4\1\0\22\4\2\0\12\4\3\0\4\4"+
    "\1\361\20\4\1\0\22\4\2\0\12\4\3\0\4\4"+
    "\1\362\20\4\1\0\22\4\2\0\6\4\1\352\3\4"+
    "\3\0\25\4\1\0\22\4\2\0\11\4\1\363\3\0"+
    "\25\4\1\0\22\4\2\0\12\4\3\0\14\4\1\364"+
    "\10\4\1\0\22\4\2\0\12\4\3\0\25\4\1\0"+
    "\2\4\1\365\17\4\2\0\12\4\3\0\1\204\24\4"+
    "\1\0\22\4\2\0\12\4\3\0\1\4\1\47\23\4"+
    "\1\0\22\4\2\0\12\4\3\0\13\4\1\366\11\4"+
    "\1\0\22\4\2\0\1\367\11\4\3\0\25\4\1\0"+
    "\22\4\2\0\12\4\3\0\5\4\1\370\17\4\1\0"+
    "\22\4\2\0\11\4\1\371\3\0\25\4\1\0\22\4"+
    "\2\0\12\4\3\0\22\4\1\372\2\4\1\0\22\4"+
    "\2\0\12\4\3\0\5\4\1\373\17\4\1\0\22\4"+
    "\2\0\12\4\3\0\2\4\1\155\22\4\1\0\22\4"+
    "\2\0\12\4\3\0\1\4\1\374\23\4\1\0\22\4"+
    "\2\0\12\4\3\0\22\4\1\375\2\4\1\0\22\4"+
    "\2\0\12\4\3\0\5\4\1\333\17\4\1\0\22\4"+
    "\2\0\12\4\3\0\11\4\1\376\13\4\1\0\22\4"+
    "\2\0\12\4\3\0\25\4\1\0\7\4\1\245\12\4"+
    "\2\0\12\4\3\0\11\4\1\377\13\4\1\0\22\4"+
    "\2\0\12\4\3\0\13\4\1\u0100\11\4\1\0\22\4"+
    "\2\0\12\4\3\0\16\4\1\u0101\6\4\1\0\22\4"+
    "\2\0\12\4\3\0\3\4\1\u0102\21\4\1\0\22\4"+
    "\2\0\12\4\3\0\20\4\1\u0103\4\4\1\0\22\4"+
    "\2\0\12\4\3\0\7\4\1\u0104\11\4\1\u0105\3\4"+
    "\1\0\22\4\2\0\11\4\1\77\3\0\25\4\1\0"+
    "\22\4\2\0\12\4\3\0\5\4\1\172\17\4\1\0"+
    "\22\4\2\0\11\4\1\56\3\0\25\4\1\0\22\4"+
    "\2\0\12\4\3\0\12\4\1\73\12\4\1\0\22\4"+
    "\2\0\12\4\3\0\6\4\1\u0106\16\4\1\0\22\4"+
    "\2\0\12\4\3\0\12\4\1\u0107\12\4\1\0\22\4"+
    "\2\0\12\4\3\0\13\4\1\u0108\11\4\1\0\22\4"+
    "\2\0\12\4\3\0\13\4\1\u0109\11\4\1\0\22\4"+
    "\2\0\12\4\3\0\6\4\1\273\16\4\1\0\22\4"+
    "\2\0\12\4\3\0\12\4\1\137\12\4\1\0\22\4"+
    "\2\0\12\4\3\0\20\4\1\176\4\4\1\0\22\4"+
    "\2\0\6\4\1\47\3\4\3\0\25\4\1\0\22\4"+
    "\2\0\12\4\3\0\1\352\24\4\1\0\22\4\2\0"+
    "\12\4\3\0\11\4\1\u010a\13\4\1\0\22\4\2\0"+
    "\12\4\3\0\7\4\1\236\15\4\1\0\22\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13970];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\22\1\1\11\4\1\1\0"+
    "\1\1\1\11\101\1\1\0\1\11\76\1\1\0\143\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** nesting level of rule */
  private int nestLevel = 0;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ModulaFlexScanner() {
      this((java.io.Reader)null);
  }


  public _ModulaFlexScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ModulaFlexScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1744) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private final void setTokenOffset(int offset){
    zzStartRead = offset;
  }

  public final int getTokenOffset(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenOffset() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    nestLevel = 0;
    zzBuffer  = buffer;
    zzCurrentPos  = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF   = false;
    zzAtBOL   = true;
    zzEndRead = end;
    yychar    = 0;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TokenDescriptor nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { yypushback(2); 
                       return ModulaTokens.Number.getToken();
          }
        case 9: break;
        case 2: 
          { return SpecialTokenDescriptors.WHITESPACE;
          }
        case 10: break;
        case 4: 
          { return ModulaTokens.Bracket.getToken();
          }
        case 11: break;
        case 3: 
          { return ModulaTokens.Number.getToken();
          }
        case 12: break;
        case 8: 
          { return ModulaTokens.BuiltinConstant.getToken();
          }
        case 13: break;
        case 6: 
          { return ModulaTokens.SystemModuleKeyword.getToken();
          }
        case 14: break;
        case 5: 
          { return ModulaTokens.Keyword.getToken();
          }
        case 15: break;
        case 1: 
          { return ModulaTokens.Default.getToken();
          }
        case 16: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return SpecialTokenDescriptors.EOF;
              }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
